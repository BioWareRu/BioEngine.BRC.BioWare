@using System.Reflection
@using BioEngine.Core.DB
@using BioEngine.Core.Entities.Blocks
@using BioEngine.Core.Site.Model
@model BioEngine.Core.Site.Model.ContentEntityViewModel
@{

    foreach (var block in Model.Item.Blocks)
    {
        if (block is CutBlock)
        {
            if (Model.Mode == ContentViewMode.Full)
            {
                continue;
            }
        }

        var modelType = typeof(BlockViewModel<,>).MakeGenericType(block.GetType(), block.GetData().GetType());
        var model = Activator.CreateInstance(modelType, block, Model.Item);
        var blockType = block.GetType().GetCustomAttribute<TypedEntityAttribute>().Type;
        <div class="block-@blockType">
            @{
                await Html.RenderPartialAsync($"Blocks/{blockType}", model);
            }
        </div>
        if (block is CutBlock)
        {
            if (Model.Mode == ContentViewMode.Short)
            {
                break;
            }
        }

@*         switch (block) *@
@*         { *@
@*             case TextBlock text: *@
@*                 await Html.RenderPartialAsync("Blocks/Text", new BlockViewModel<TextBlock, TextBlockData>(text, Model.Item)); *@
@*                 break; *@
@*             case CutBlock cut: *@
@*                 if (Model.Mode == ContentViewMode.Full) *@
@*                 { *@
@*                     continue; *@
@*                 } *@
@*                 await Html.RenderPartialAsync("Blocks/Cut", new BlockViewModel<CutBlock, CutBlockData>(cut, Model.Item)); *@
@*                 allBlocksRendered = true; *@
@*                 break; *@
@*              *@
@*             default: *@
@*                 <div>@block.TypeTitle</div> *@
@*                 break; *@
@*         } *@
@*         if (allBlocksRendered) *@
@*         { *@
@*             break; *@
@*         } *@
    }
}

